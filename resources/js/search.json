[[{"l":"Cardano Developers Professional Program","p":["These are my notes from the Cardano Developers Professional Program"]},{"l":"About","p":["A program of Emurgo Academy (2022)."]},{"l":"Syllabus","p":["Cardano Binaries Setup","Cardano Concepts","DApp Connector","Deep Dive - Native Tokens","Deep Dive - Transaction Metadata","Deep Dive - Transaction Structure","Developer Tools","Glow, IELE, K-Framework","Governance","Guessing Game","Introduction to Cardano Toolchain","Math Bounty","Milkomedia","Native Assessment","Plutus Assessment","Plutus Overview","Plutus Prerequisites Setup","Plutus Smart Conracts","Plutus Standard Samples"]}],[{"l":"Installing the Cardano components on MacOS","p":["These are the steps that worked for me. My machine is an Intel based Mac. For reference I also include the extra steps needed for an M1 based Mac.","(Based on Installing cardano-node instructions at developers.cardano.org, with some modifications.)"]},{"l":"XCode","p":["Downloaded Xcode and the Xcode Command Line Tools. Since my computer runs MacOS Catalina, I downloaded version 12.4. Homebrew needs to also be installed."]},{"l":"Installing Homebrew packages","p":["Installed some libraries with brew:","If you have an M1 Mac, you will need to also install llvm.","You need to have GHC 8.10.7 and Cabal 3.6.2.0 installed on your computer. You can verify that you have the correct versions with","If you need to upgrade GHC (or install from scratch), please refer to the corresponding instructions here."]},{"i":"downloading--compiling","l":"Downloading & Compiling"},{"l":"Working directory","p":["Created a working directory to store the source-code and build the components."]},{"l":"Install libsodium","p":["Next, I downloaded, compiled and installed libsodium:"]},{"l":"Added to bash shell profile","p":["Added a couple of lines to my bash shell profile $HOME/.bashrc","Reloaded the shell profile with source $Home/.bashrc. (If you use zsh, use .zshrc whenever I refer to .bashrc.)","If your system is running on an M1 Mac (so that you also installed llvm), then you will also need to add","and reload the shell profile with source $HOME/.bashrc."]},{"l":"Install libsecp256k1"},{"l":"Install the Cardano components","p":["Next, I downloaded, compiled and installed cardano-node and cardano-cli:","If there exists a directory named cardano-node, say from a previous version, remove it (with all its contents).","Downloaded the cardano-node respository:","Ordinarily, we switch the repository to the latest tagged commit with:","However, these are not ordinary times, as we are in the middle of a protocol upgrade (as of 2022-08-01). In order to be able to work with the testnet, we instead force a switch to either version 1.35.1 or 1.35.2:"]},{"l":"Build the Cardano components","p":["We explicitly force ghc to use the correct version:","If your system is running on an M1 Mac then you will also need to set these cabal related options before building:","Built the node","Install the newly built node and CLI to $HOME/.local/bin","Added the following line to the shell profile $HOME/.bashrc","and reloaded with source $HOME/.bashrc","To verfiy all is OK, checked versions installed:"]},{"i":"running-cardano-node-with-external-hard-drive","l":"Running cardano-node (with external hard drive)","p":["You need to create a directory for the configuration files. In my case, I created"]},{"l":"Configuration files","p":["From this repository, download the following configuration files:","testnet-config.json","testnet-byron-genesis.json","testnet-shelley-genesis.json","testnet-alonzo-genesis.json","testnet-topology.json"]},{"l":"Socket","p":["Define the following environment variable:","(The Cardano socket is created automatically when you start the Cardano node for the first time.)","Make sure to write ' export CARDANO_NODE_SOCKET_PATH' without a dollar sign in front of CARDANO.","You need to export this environment variable whenever you start a shell in which you intend to run the script start-node-testnet.sh defined in the next subsection."]},{"l":"Script for starting the cardano-node","p":["Create the script start-node-testnet.sh with the following content:","Make the script executable with"]},{"l":"Database on an external hard drive","p":["The database-path sets the name of the database directory. For me it was desirable to have the database on an external hard drive. This is achieved simply by setting a symbolic link.","Assume we want the database to sit inside directory cardano at the root of an external hard drive named External-Hard-Drive. Remembering that the active directory on our shell is still testnet, we execute"]},{"l":"Start the Cardano node","p":["After the symbolic link was created, I started the Cardano node with","My MacBook took several hours to sync the testnet."]},{"l":"Verify sync status","p":["Verified the status of synchronization with","which, after several hours, resulted in"]},{"l":"Reference","p":["The repository of the cardano node components sits at https://github.com/input-output-hk/cardano-node."]}],[{"i":"wallets-setup--funding","l":"Wallets setup & funding"},{"l":"Key pair","p":["The key pair consists of:","Private key (signature) ⟶ .skey","Public key (verification) ⟶ .vkey"]},{"l":"Socket","p":["Recall that if you want to run cardano-cli commands on-chain, you need to export the path variable on the current shell:","Note: Cardano socket is created automatically when you start the Cardano node for the first time."]},{"l":"Testnet magic","p":["Current Testnet magic is 1097911063"]},{"l":"Protocol parameters","p":["We query the testnet protocol parameters and save them on a file on the testnet directory."]},{"l":"Addresses","p":["\"Enterprise\" addresses (only for payment)","Payment + Staking","KES address (\"evolutionary\", stake pool operators need to renew every 90 d)","External with staking","Internal with staking","External without staking","All addresses are derived from hashing the public key."]},{"l":"Generating credentials","p":["Generating key pair","Generating address"]},{"l":"Funding the wallet","p":["Now that we have an address in myWallet1.addr, we fund the wallet using the Faucet.","We only fund wallet 1 in this manner. Wallet 2 is funded by building a transaction, as explained below. (If we wanted to use the faucet to fund wallet 2 as well we would need to wait at least 24 hours.)"]},{"l":"Querying a wallet address","p":["Can verify funds at Cardanoscan (testnet)","img"]},{"l":"Transactions"},{"l":"Building the transaction","p":["Script","File tx_draft.sh","Execution"]},{"l":"Signing the transaction","p":["Script","File tx_signed.sh","Execution"]},{"l":"Submitting the transaction","p":["We first query the utxo's at wallet 2 before the transaction:","Submit the transaction:"]},{"l":"Final balances","p":["Query the utxo's at wallet 2 after the transaction:","Of course, the balance of wallet 1 must have diminished:"]},{"l":"Some useful links","p":["Faucet","Documentation about some Guild Tools (Guild LiveView)"]}],[{"l":"Working wth Metadata","p":["We can attach metadata to a transaction. From the reference:","Transaction metadata (tx metadata) can contain details about a specific transaction, including sender and receiver IDs, transaction comments, and tags. Adding metadata to transactions provides transaction information by adding arbitrarily structured data onto the chain and is a useful feature in Cardano Shelley. Tx metadata is stored on-chain and is carried along with each transaction. A factor in its design is that the on-chain metadata is not stored in the ledger state and does not influence transaction validation, thereby not compromising ledger performance.","The structure of the metadata is defined by a key-value mapping. Keys are non-negative integers limited in size up to 64 bits and values are simple terms, consisting of integers, text strings, byte strings, lists, and maps. Values are required to be structured.","On-chain metadata that is carried along with the transaction is encoded as CBOR. To create a transaction, you can add the metadata with","Pre-encoded CBOR","Metadata in JSON format with no schema","Metadata in JSON format with detailed schema","In this notes we: a) write the json file with metadata; b) build, sign and send a transaction with metadata."]},{"l":"The metadata","p":["In this exercise, the purpose of this metadata is to assign a value to a given metadata key (integer) k = 152755. The value is in turn a mapping that assigns the hash of a name to key name and the value \"1\" to the key flag completed."]},{"l":"Metadata json file"},{"l":"The transaction"},{"l":"Scripts for build and sign","p":["Build","Wrote the script tx_meta_draft.sh:","Sign","Wrote the script tx_meta_signed.sh:"]},{"l":"Script execution"},{"l":"Submitting the transaction"},{"l":"References","p":["Cardano Node - Transaction Metadata","Simple Scripts","Koios","CardanoScan","SHA3-256"]}]]